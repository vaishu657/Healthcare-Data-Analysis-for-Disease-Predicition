# -*- coding: utf-8 -*-
"""Customer Segmentation Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pOiMC2kWQw1v9jjs6slkAOJp0hXUmGo5
"""

from google.colab import files
uploaded = files.upload()  # Upload your 'data.csv' file

import pandas as pd

# Load the dataset
df = pd.read_csv('ecommerce_transactions.csv')

# Display the first 5 rows
df.head()

# Check structure and data types
df.info()

# Check for missing values
print(df.isnull().sum())

# Drop rows with missing essential values
df.dropna(subset=['User_Name', 'Purchase_Amount', 'Transaction_ID'], inplace=True)

# Convert Transaction_Date to datetime
df['Transaction_Date'] = pd.to_datetime(df['Transaction_Date'])

# Check unique users
print("Unique customers:", df['User_Name'].nunique())

# Frequency of purchases per customer
purchase_freq = df.groupby('User_Name')['Transaction_ID'].count().reset_index()
purchase_freq.columns = ['User_Name', 'Purchase_Frequency']

# Total & average purchase value per customer
purchase_amt = df.groupby('User_Name')['Purchase_Amount'].agg(['sum', 'mean']).reset_index()
purchase_amt.columns = ['User_Name', 'Total_Purchase', 'Average_Purchase']

# Merge all into one customer-level DataFrame
customer_data = pd.merge(purchase_freq, purchase_amt, on='User_Name')

# Summary of key metrics
print(customer_data.describe())

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Select features
features = customer_data[['Purchase_Frequency', 'Total_Purchase', 'Average_Purchase']]

# Scale the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Apply K-Means
kmeans = KMeans(n_clusters=4, random_state=42)
customer_data['Cluster'] = kmeans.fit_predict(scaled_features)

# Preview
customer_data.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Scatter plot of segments
plt.figure(figsize=(8, 6))
sns.scatterplot(
    data=customer_data,
    x='Purchase_Frequency',
    y='Total_Purchase',
    hue='Cluster',
    palette='Set2',
    s=100
)
plt.title('Customer Segments: Frequency vs Total Purchase')
plt.xlabel('Purchase Frequency')
plt.ylabel('Total Purchase Amount')
plt.grid(True)
plt.legend(title='Cluster')
plt.show()

# Bar plot of average metrics per cluster
cluster_summary = customer_data.groupby('Cluster')[['Purchase_Frequency', 'Total_Purchase', 'Average_Purchase']].mean()
cluster_summary.plot(kind='bar', figsize=(10, 6), colormap='viridis')
plt.title('Average Metrics per Cluster')
plt.ylabel('Value')
plt.xlabel('Cluster')
plt.grid(True)
plt.show()

# Print average behavior by cluster
print("Cluster Summary:")
print(cluster_summary)

# Example insights
for i in cluster_summary.index:
    print(f"\nCluster {i} Insights:")
    freq = cluster_summary.loc[i, 'Purchase_Frequency']
    total = cluster_summary.loc[i, 'Total_Purchase']
    avg = cluster_summary.loc[i, 'Average_Purchase']

    if total > cluster_summary['Total_Purchase'].mean():
        print("High total spenders – target for loyalty programs.")
    elif freq > cluster_summary['Purchase_Frequency'].mean():
        print("Frequent buyers – promote bundles or subscriptions.")
    else:
        print("Low activity – consider re-engagement campaigns.")

