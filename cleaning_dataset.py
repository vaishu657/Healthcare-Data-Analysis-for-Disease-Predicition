# -*- coding: utf-8 -*-
"""cleaning Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gkSaikOJTa9-a5EYKeGZhIgmnSb6xXnX
"""

from google.colab import files
uploaded = files.upload()  # Upload your 'data.csv' file

import pandas as pd

# Load the uploaded CSV file
df = pd.read_csv('solution.csv')

# Show basic info
print("Shape of dataset:", df.shape)
df.head()

# Check for column data types and overall info
df.info()

# Check for unique column names (optional, good practice)
print("\nDuplicate column names:", df.columns[df.columns.duplicated()])

# Quick check for any rows with all NaN (optional)
df[df.isnull().all(axis=1)]

# Check how many missing values in each column
print("\nMissing values per column:")
print(df.isnull().sum())

# Example 1: Fill missing numerical values with median
df.fillna(df.median(numeric_only=True), inplace=True)

# Example 2: Fill missing categorical values with mode
for col in df.select_dtypes(include=['object']):
    df[col].fillna(df[col].mode()[0], inplace=True)

# Check for duplicate rows
duplicate_count = df.duplicated().sum()
print(f"\nDuplicate rows found: {duplicate_count}")

# Remove duplicates if any
df = df.drop_duplicates()

# Standardize column names
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# Convert date columns if any (example)
# df['sale_date'] = pd.to_datetime(df['sale_date'])

# Example: Remove trailing spaces in object-type columns
for col in df.select_dtypes(include=['object']):
    df[col] = df[col].str.strip()

import numpy as np

def detect_outliers_iqr(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    outliers = data[(data[column] < lower) | (data[column] > upper)]
    return outliers

# Detect outliers in each numerical column
numeric_cols = df.select_dtypes(include=[np.number]).columns

for col in numeric_cols:
    outliers = detect_outliers_iqr(df, col)
    print(f"\nOutliers in {col}: {len(outliers)}")

    # Optionally: remove or cap them
    # df = df[~df.index.isin(outliers.index)]

# Save the cleaned data to a new file
df.to_csv('cleaned_solution.csv', index=False)
print("\nCleaned data saved as 'cleaned_solution.csv'")

